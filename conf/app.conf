appname = gosimple
httpaddr = 127.0.0.1
# this will be injected to index.html and parsed by the websocket library
httpport = 8080
runmode = dev
# caution! the following value enables reading data from request body
# if is set to false, you will no longer have access to POST parameters
copyrequestbody = true
#------------------------------------------------------------------------------
[xsrf]
# XSRF Security
# CAUTION IN PRODUCTION YOU MUST ENABLED THIS!
# enable/disable XSRF (set true/false) default: disabled
enabled = false
# set a unique key, for example: 3b3bb40751794d2cbf9be0727ce42764
xsrfkey = "SECURITY-DANGER-YOU-MUST-CHANGE-ME"
# XSRF expiration in seconds
# it is good idea to set expiration after session's expiry
# defaults to 3600 secs
xsrfexpire = 3600
#------------------------------------------------------------------------------
[session]
# session settings
# enable session? values true/false
sessionEnabled = true
# where to store the session, supported values: memory, file, mysql, redis, memcache, postgres
sessionStorage = "memory"
# session's name, this will be cookie's name too, defaults to appname
sessionName =
# for anything else except memory, this field is required
# check https://beego.me/docs/mvc/controller/session.md for details
sessionPath =
# session cookie lifetime, default set to 0 for better security
sessionCookieLifetime = 0
# session lifetime (in seconds), consider the ballance between
# user experince UX and security according to your application's needs
# default 1 hour (3600 secs)
sessionLifetime = 3600
#------------------------------------------------------------------------------
[registration]
# if set to false the registration will not be available
is_open = true
min_username = 5
min_password = 6
password_contain_caps = true
password_contain_numbers = true
password_contain_symbols = true
#------------------------------------------------------------------------------
[websocket]
# open websocket limit, if this limite is reached the app will not accept
# new WebSocket connections
limit = 100
#------------------------------------------------------------------------------
[database]
# use one of mysql, postgres, sqlite3
# default sqlite (saved on project's root)
database = sqlite3
dbname = database.db
# edit the options bellow if you are using mysql or postgres
dbaddress =
dbport =
dbuser =
dbpass =
dbMaxIdleCons = 30
#------------------------------------------------------------------------------
[mail]
## email sending setup
# service provider, e.g: smtp.gmail.com
service = in-v3.mailjet.com
# service port
port = 587
# username to login to the mail provider
username =
# password to login to the mail provider
password =
# default from field
from =
# email format text/plain or text/html
format = text/plain
## the app uses email templates located at views/email/
#  for register/forgot - reset password/welcome mailing
#  the following values are for use in templates as defaults
#  leave them empty if you are not going to use them
#  Additionally you can add your custom templates at views/email/ and
#  use the utility functions to send mails
companyname = GoSimple
appwebsite = https://github.com/stef-k/gosimple
# contact mail used in mail signature
email = user@example.com
# contact telephone number used in mail signature
tel = some number
#------------------------------------------------------------------------------
[jwt]
# JWT authendication for app's RESTful API
# For more info on JSON Web Tokens (JWT) search Google :)
# is JWT issuing enabled (true/false) default true
# if enabled there is the /get-token/ endpoint issuing tokens
enabled = true
# key to sign our JWT tokens, change it with something unique like: 1b3bb4056118844d2cbf9be0727ce42793
key = "SECURITY-DANGER-YOU-MUST-CHANGE-ME"
# token expiration in hours, default is 12 hours
expiresIn = 12
#------------------------------------------------------------------------------
# Classic login using /login/ URL and session as storage method
# you may want to disable this method and use JWT token based authentication
# for example for use with a JavaScript Framework for Single Page Applications, etc
# default if not set is true
[login]
classicLoginEnabled = true
#------------------------------------------------------------------------------
[limiter]
# rate limiter
# feature is enabled or disabled for login attempts
loginLimiterEnabled = true
# how many attempts before locking, default if left empty is 5 attempts
loginAttempts = 5
# how much time in minutes to lock? default if left empty is 1 min
loginLockMinutes = 1
# API rate limiting per specified URL for use in controllers or router
# rate limit (if apiLimiterEnabled) = apiRequests/perTime limitingTimeUnit
# so if you want a limit of 20 requests per minute, use the below default values
# feature is enabled or disabled for API rate limiting
apiLimiterEnabled = true
# requests limit number
apiRequestsLimit = 20
# specify the time unit to apply the limiting, min or sec, for minutes or seconds
# default min
limitingTimeUnit = min
# specify the minute(s) or second(s), default is 1
perTime = 1
